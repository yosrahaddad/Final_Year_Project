Private class __Persister__
extends SysDataEntityPersister
{
    // Data source ID macros
    #define.WHSInventTransOrderCommittedReservationView_ID(1)
    
    // Data source buffers
    WHSInventTransOrderCommittedReservationView m_WHSInventTransOrderCommittedReservationView;
    
    protected void mapEntityToDataSources(DataEntityRuntimeContext _entityCtx)
    {
        this.validateFieldFailed = false;
        this.mapEntityToDataSource(_entityCtx, _entityCtx.getRuntimeContextByName('WHSInventTransOrderCommittedReservationView'));
        this.mapEntityToDataSourcesExtensions(_entityCtx);
        if(this.validateFieldFailed)
        {
            throw Exception::ViewDataSourceValidation;
        }
    }
    private boolean isAnyFieldSet_DS1(WHSInventTransOrderCommittedReservationView _wHSInventTransOrderCommittedReservationView, DataEntityDataSourceRuntimeContext _dataSourceCtx, DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = false;
        if(_wHSInventTransOrderCommittedReservationView.isFieldSet(fieldnum(WHSInventTransOrderCommittedReservationView,ReferenceCategory)))
        {
            return true;
        }
        if(_wHSInventTransOrderCommittedReservationView.isFieldSet(fieldnum(WHSInventTransOrderCommittedReservationView,OrderNumber)))
        {
            return true;
        }
        if(_wHSInventTransOrderCommittedReservationView.isFieldSet(fieldnum(WHSInventTransOrderCommittedReservationView,CommittingOriginInventTransId)))
        {
            return true;
        }
        if(_wHSInventTransOrderCommittedReservationView.isFieldSet(fieldnum(WHSInventTransOrderCommittedReservationView,LicensePlateId)))
        {
            return true;
        }
        if(_wHSInventTransOrderCommittedReservationView.isFieldSet(fieldnum(WHSInventTransOrderCommittedReservationView,ReservedInventoryQuantity)))
        {
            return true;
        }
        if(_wHSInventTransOrderCommittedReservationView.isFieldSet(fieldnum(WHSInventTransOrderCommittedReservationView,ItemId)))
        {
            return true;
        }
        if(_wHSInventTransOrderCommittedReservationView.isFieldSet(fieldnum(WHSInventTransOrderCommittedReservationView,ConfigId)))
        {
            return true;
        }
        if(_wHSInventTransOrderCommittedReservationView.isFieldSet(fieldnum(WHSInventTransOrderCommittedReservationView,InventColorId)))
        {
            return true;
        }
        if(_wHSInventTransOrderCommittedReservationView.isFieldSet(fieldnum(WHSInventTransOrderCommittedReservationView,InventSizeId)))
        {
            return true;
        }
        if(_wHSInventTransOrderCommittedReservationView.isFieldSet(fieldnum(WHSInventTransOrderCommittedReservationView,InventStyleId)))
        {
            return true;
        }
        rtrn = this.isAnyFieldSet_Extensions(_entityCtx, _dataSourceCtx, _wHSInventTransOrderCommittedReservationView) ? true : false;
        return rtrn;
    }
    protected boolean saveDataSources(DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = true;
        DataEntityDataSourceRuntimeContext _dataSourceCtx = null;
        // save data sources in topological order.
        {
            // handle datasources which are part of extensions and need to be saved before [WHSInventTransOrderCommittedReservationView]
            if(!this.preSaveDataSource(_entityCtx, 'WHSInventTransOrderCommittedReservationView'))
            {
                return false;
            }
            _dataSourceCtx = _entityCtx.getRuntimeContextByName('WHSInventTransOrderCommittedReservationView');
            // propagates foreign key values from referenced data sources which are part of extensions.
            this.foreignKeyPropagationExtensions(_entityCtx, _dataSourceCtx);
            if(this.isAnyFieldSet_DS1(_dataSourceCtx.getBuffer(),_dataSourceCtx,_entityCtx))
            {
                // invoke conflict detection for read-only data source.
                WHSInventTransOrderCommittedReservationView resolvedRecord = this.detectConflictForDataSource(_entityCtx, _dataSourceCtx);
                if(!resolvedRecord)
                {
                    checkFailed(strfmt("@ApplicationPlatform:DataEntityReadonlyDataSourceNotFound", _dataSourceCtx.name()));
                    throw Exception::ViewDataSourceValidation;
                }
                // marks the read-only data source as 'saved' and skips actual insert/update operation.
                _dataSourceCtx.setDataSaved(true);
            }
            // in case of update marks the read-only data source as 'saved' and skips actual insert/update operation.
            else if(_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
            {
                _dataSourceCtx.setDataSaved(true);
            }
            _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
            // inserts/updates data source [WHSInventTransOrderCommittedReservationView].
            if(!this.saveDataSource(_entityCtx, _dataSourceCtx))
            {
                // returns from here if the root data source fails to be saved.
                return false;
            }
            this.postSaveDataSource();
        }
        // handle datasources which are part of extensions and need to be saved in last 
        this.preSaveDataSource(_entityCtx, '');
        return rtrn;
    }
    protected boolean deleteDataSources(DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = true;
        DataEntityDataSourceRuntimeContext _dataSourceCtx = null;
        // delete data sources in reverse topological order.
        {
            // handle datasources which are part of extensions and need to be saved before [WHSInventTransOrderCommittedReservationView]
            if(!this.preSaveDataSource(_entityCtx, 'WHSInventTransOrderCommittedReservationView'))
            {
                return false;
            }
            _dataSourceCtx = _entityCtx.getRuntimeContextByName('WHSInventTransOrderCommittedReservationView');
            // skips delete operation against read-only data source.
            // marks the read-only data source as 'saved' and skips actual delete operation.
            _dataSourceCtx.setDataSaved(true);
            _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
            // deletes data source [WHSInventTransOrderCommittedReservationView].
            if(!this.saveDataSource(_entityCtx, _dataSourceCtx))
            {
                // returns from here if the root data source fails to be saved.
                return false;
            }
            this.postSaveDataSource();
        }
        // handle datasources which are part of extensions and need to be saved in last 
        this.preSaveDataSource(_entityCtx, '');
        return rtrn;
    }
    private void mapToDataSource_DS1(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx, WHSInventTransOrderCommittedReservationView _wHSInventTransOrderCommittedReservationView, WHSOrderCommittedLicensePlateReservationEntity _wHSOrderCommittedLicensePlateReservationEntity)
    {
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _wHSOrderCommittedLicensePlateReservationEntity, fieldnum(WHSOrderCommittedLicensePlateReservationEntity, ReferenceCategory), _wHSInventTransOrderCommittedReservationView, fieldnum(WHSInventTransOrderCommittedReservationView, ReferenceCategory), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _wHSOrderCommittedLicensePlateReservationEntity, fieldnum(WHSOrderCommittedLicensePlateReservationEntity, OrderNumber), _wHSInventTransOrderCommittedReservationView, fieldnum(WHSInventTransOrderCommittedReservationView, OrderNumber), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _wHSOrderCommittedLicensePlateReservationEntity, fieldnum(WHSOrderCommittedLicensePlateReservationEntity, InventoryLotId), _wHSInventTransOrderCommittedReservationView, fieldnum(WHSInventTransOrderCommittedReservationView, CommittingOriginInventTransId), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _wHSOrderCommittedLicensePlateReservationEntity, fieldnum(WHSOrderCommittedLicensePlateReservationEntity, LicensePlateNumber), _wHSInventTransOrderCommittedReservationView, fieldnum(WHSInventTransOrderCommittedReservationView, LicensePlateId), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _wHSOrderCommittedLicensePlateReservationEntity, fieldnum(WHSOrderCommittedLicensePlateReservationEntity, ItemNumber), _wHSInventTransOrderCommittedReservationView, fieldnum(WHSInventTransOrderCommittedReservationView, ItemId), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _wHSOrderCommittedLicensePlateReservationEntity, fieldnum(WHSOrderCommittedLicensePlateReservationEntity, ProductConfigurationId), _wHSInventTransOrderCommittedReservationView, fieldnum(WHSInventTransOrderCommittedReservationView, ConfigId), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _wHSOrderCommittedLicensePlateReservationEntity, fieldnum(WHSOrderCommittedLicensePlateReservationEntity, ProductColorId), _wHSInventTransOrderCommittedReservationView, fieldnum(WHSInventTransOrderCommittedReservationView, InventColorId), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _wHSOrderCommittedLicensePlateReservationEntity, fieldnum(WHSOrderCommittedLicensePlateReservationEntity, ProductSizeId), _wHSInventTransOrderCommittedReservationView, fieldnum(WHSInventTransOrderCommittedReservationView, InventSizeId), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _wHSOrderCommittedLicensePlateReservationEntity, fieldnum(WHSOrderCommittedLicensePlateReservationEntity, ProductStyleId), _wHSInventTransOrderCommittedReservationView, fieldnum(WHSInventTransOrderCommittedReservationView, InventStyleId), 1);
        
        this.mapToDataSourceExtensions(_dataSourceCtx, _wHSInventTransOrderCommittedReservationView, _wHSOrderCommittedLicensePlateReservationEntity);
        _wHSInventTransOrderCommittedReservationView.trackFieldExternallySet(false);
    }
    protected void doMapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        switch(_dataSourceCtx.id())
        {
            case #WHSInventTransOrderCommittedReservationView_ID:
                this.mapToDataSource_DS1(_entityCtx, _dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            default :
                this.doMapEntityToDataSourceExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
    }
    private void mapFromDataSource_DS1(DataEntityDataSourceRuntimeContext _dataSourceCtx, WHSInventTransOrderCommittedReservationView _wHSInventTransOrderCommittedReservationView, WHSOrderCommittedLicensePlateReservationEntity _wHSOrderCommittedLicensePlateReservationEntity)
    {
        this.mapDataSourceFieldToEntityField(_wHSInventTransOrderCommittedReservationView, fieldnum(WHSInventTransOrderCommittedReservationView, ReferenceCategory), _wHSOrderCommittedLicensePlateReservationEntity, fieldnum(WHSOrderCommittedLicensePlateReservationEntity, ReferenceCategory), false);
        this.mapDataSourceFieldToEntityField(_wHSInventTransOrderCommittedReservationView, fieldnum(WHSInventTransOrderCommittedReservationView, OrderNumber), _wHSOrderCommittedLicensePlateReservationEntity, fieldnum(WHSOrderCommittedLicensePlateReservationEntity, OrderNumber), false);
        this.mapDataSourceFieldToEntityField(_wHSInventTransOrderCommittedReservationView, fieldnum(WHSInventTransOrderCommittedReservationView, CommittingOriginInventTransId), _wHSOrderCommittedLicensePlateReservationEntity, fieldnum(WHSOrderCommittedLicensePlateReservationEntity, InventoryLotId), false);
        this.mapDataSourceFieldToEntityField(_wHSInventTransOrderCommittedReservationView, fieldnum(WHSInventTransOrderCommittedReservationView, LicensePlateId), _wHSOrderCommittedLicensePlateReservationEntity, fieldnum(WHSOrderCommittedLicensePlateReservationEntity, LicensePlateNumber), false);
        this.mapDataSourceFieldToEntityField(_wHSInventTransOrderCommittedReservationView, fieldnum(WHSInventTransOrderCommittedReservationView, ReservedInventoryQuantity), _wHSOrderCommittedLicensePlateReservationEntity, fieldnum(WHSOrderCommittedLicensePlateReservationEntity, ReservedInventoryQuantity), false);
        this.mapDataSourceFieldToEntityField(_wHSInventTransOrderCommittedReservationView, fieldnum(WHSInventTransOrderCommittedReservationView, ItemId), _wHSOrderCommittedLicensePlateReservationEntity, fieldnum(WHSOrderCommittedLicensePlateReservationEntity, ItemNumber), false);
        this.mapDataSourceFieldToEntityField(_wHSInventTransOrderCommittedReservationView, fieldnum(WHSInventTransOrderCommittedReservationView, ConfigId), _wHSOrderCommittedLicensePlateReservationEntity, fieldnum(WHSOrderCommittedLicensePlateReservationEntity, ProductConfigurationId), false);
        this.mapDataSourceFieldToEntityField(_wHSInventTransOrderCommittedReservationView, fieldnum(WHSInventTransOrderCommittedReservationView, InventColorId), _wHSOrderCommittedLicensePlateReservationEntity, fieldnum(WHSOrderCommittedLicensePlateReservationEntity, ProductColorId), false);
        this.mapDataSourceFieldToEntityField(_wHSInventTransOrderCommittedReservationView, fieldnum(WHSInventTransOrderCommittedReservationView, InventSizeId), _wHSOrderCommittedLicensePlateReservationEntity, fieldnum(WHSOrderCommittedLicensePlateReservationEntity, ProductSizeId), false);
        this.mapDataSourceFieldToEntityField(_wHSInventTransOrderCommittedReservationView, fieldnum(WHSInventTransOrderCommittedReservationView, InventStyleId), _wHSOrderCommittedLicensePlateReservationEntity, fieldnum(WHSOrderCommittedLicensePlateReservationEntity, ProductStyleId), false);
        this.mapFromDataSourceExtensions(_dataSourceCtx, _wHSInventTransOrderCommittedReservationView, _wHSOrderCommittedLicensePlateReservationEntity);
        // map system fields (e.g. recid and recversion) from data source buffer to view record.
        _wHSOrderCommittedLicensePlateReservationEntity.fromViewDataSource(_dataSourceCtx.id(), _wHSInventTransOrderCommittedReservationView);
    }
    protected void doMapDataSourceToEntity(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        switch(_dataSourceCtx.id())
        {
            case #WHSInventTransOrderCommittedReservationView_ID:
                this.mapFromDataSource_DS1(_dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            default :
                this.doMapDataSourceToEntityExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
    }
    protected Common doFindDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        Common rtrn = null;
        switch(_dataSourceCtx.id())
        {
            case #WHSInventTransOrderCommittedReservationView_ID:
                rtrn = this.LookForUniqueKeyMatch_DS1(_entityCtx.getEntityRecord(), _dataSourceCtx.getBuffer());
                break;
            default :
                rtrn = this.doFindDataSourceExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet_DS1(WHSOrderCommittedLicensePlateReservationEntity _wHSOrderCommittedLicensePlateReservationEntity, str disabledConfigKey = null)
    {
        boolean rtrn = false;
        if(_wHSOrderCommittedLicensePlateReservationEntity.isFieldSet(fieldnum(WHSOrderCommittedLicensePlateReservationEntity, ReferenceCategory)))
        {
            return true;
        }
        if(_wHSOrderCommittedLicensePlateReservationEntity.isFieldSet(fieldnum(WHSOrderCommittedLicensePlateReservationEntity, OrderNumber)))
        {
            return true;
        }
        if(_wHSOrderCommittedLicensePlateReservationEntity.isFieldSet(fieldnum(WHSOrderCommittedLicensePlateReservationEntity, InventoryLotId)))
        {
            return true;
        }
        if(_wHSOrderCommittedLicensePlateReservationEntity.isFieldSet(fieldnum(WHSOrderCommittedLicensePlateReservationEntity, LicensePlateNumber)))
        {
            return true;
        }
        if(_wHSOrderCommittedLicensePlateReservationEntity.isFieldSet(fieldnum(WHSOrderCommittedLicensePlateReservationEntity, ReservedInventoryQuantity)))
        {
            return true;
        }
        if(_wHSOrderCommittedLicensePlateReservationEntity.isFieldSet(fieldnum(WHSOrderCommittedLicensePlateReservationEntity, ItemNumber)))
        {
            return true;
        }
        if(_wHSOrderCommittedLicensePlateReservationEntity.isFieldSet(fieldnum(WHSOrderCommittedLicensePlateReservationEntity, ProductConfigurationId)))
        {
            return true;
        }
        if(_wHSOrderCommittedLicensePlateReservationEntity.isFieldSet(fieldnum(WHSOrderCommittedLicensePlateReservationEntity, ProductColorId)))
        {
            return true;
        }
        if(_wHSOrderCommittedLicensePlateReservationEntity.isFieldSet(fieldnum(WHSOrderCommittedLicensePlateReservationEntity, ProductSizeId)))
        {
            return true;
        }
        if(_wHSOrderCommittedLicensePlateReservationEntity.isFieldSet(fieldnum(WHSOrderCommittedLicensePlateReservationEntity, ProductStyleId)))
        {
            return true;
        }
        rtrn = this.isAnyMappedDataSourceExtensionFieldSet(_wHSOrderCommittedLicensePlateReservationEntity, 'WHSInventTransOrderCommittedReservationView', disabledConfigKey);
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean rtrn = false;
        switch(_dataSourceCtx.id())
        {
            case #WHSInventTransOrderCommittedReservationView_ID:
                rtrn = this.isAnyMappedDataSourceFieldSet_DS1(_entityCtx.getEntityRecord());
                break;
            default :
                rtrn = this.isAnyMappedDataSourceFieldSet_DSExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
        return rtrn;
    }
    protected boolean validateDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean rtrn = true;
        switch(_dataSourceCtx.id())
        {
            default :
                rtrn = this.validateDataSourceExtensions_DSExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
        return rtrn;
    }
    private void mapToMatchingRecord_DS1(DataEntityDataSourceRuntimeContext _dataSourceCtx, WHSInventTransOrderCommittedReservationView _wHSInventTransOrderCommittedReservationView, WHSInventTransOrderCommittedReservationView _matchingRecord)
    {
        // map data changes in bound fields.
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _wHSInventTransOrderCommittedReservationView, fieldnum(WHSInventTransOrderCommittedReservationView, ReferenceCategory), _matchingRecord, fieldnum(WHSInventTransOrderCommittedReservationView, ReferenceCategory), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _wHSInventTransOrderCommittedReservationView, fieldnum(WHSInventTransOrderCommittedReservationView, OrderNumber), _matchingRecord, fieldnum(WHSInventTransOrderCommittedReservationView, OrderNumber), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _wHSInventTransOrderCommittedReservationView, fieldnum(WHSInventTransOrderCommittedReservationView, CommittingOriginInventTransId), _matchingRecord, fieldnum(WHSInventTransOrderCommittedReservationView, CommittingOriginInventTransId), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _wHSInventTransOrderCommittedReservationView, fieldnum(WHSInventTransOrderCommittedReservationView, LicensePlateId), _matchingRecord, fieldnum(WHSInventTransOrderCommittedReservationView, LicensePlateId), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _wHSInventTransOrderCommittedReservationView, fieldnum(WHSInventTransOrderCommittedReservationView, ItemId), _matchingRecord, fieldnum(WHSInventTransOrderCommittedReservationView, ItemId), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _wHSInventTransOrderCommittedReservationView, fieldnum(WHSInventTransOrderCommittedReservationView, ConfigId), _matchingRecord, fieldnum(WHSInventTransOrderCommittedReservationView, ConfigId), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _wHSInventTransOrderCommittedReservationView, fieldnum(WHSInventTransOrderCommittedReservationView, InventColorId), _matchingRecord, fieldnum(WHSInventTransOrderCommittedReservationView, InventColorId), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _wHSInventTransOrderCommittedReservationView, fieldnum(WHSInventTransOrderCommittedReservationView, InventSizeId), _matchingRecord, fieldnum(WHSInventTransOrderCommittedReservationView, InventSizeId), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _wHSInventTransOrderCommittedReservationView, fieldnum(WHSInventTransOrderCommittedReservationView, InventStyleId), _matchingRecord, fieldnum(WHSInventTransOrderCommittedReservationView, InventStyleId), 1);
        this.mapToMatchingRecordExtensions(_dataSourceCtx, tablestr(WHSOrderCommittedLicensePlateReservationEntity), _wHSInventTransOrderCommittedReservationView, _matchingRecord);
    }
    protected void mapDataSourceToMatchingRecord(DataEntityDataSourceRuntimeContext _dataSourceCtx, Common _matchingRecord)
    {
        switch(_dataSourceCtx.id())
        {
            case #WHSInventTransOrderCommittedReservationView_ID:
                this.mapToMatchingRecord_DS1(_dataSourceCtx, _dataSourceCtx.getBuffer(), _matchingRecord);
                break;
            default :
                this.mapDataSourceToMatchingRecordExtensions(_dataSourceCtx, _matchingRecord);
                break;
        }
    }
    protected void validateConfigurationKeys(DataEntityRuntimeContext _entityCtx)
    {
        // Ensure that the entity configuration key is enabled
        if(!isConfigurationKeyEnabled(configurationKeyName2Id('WHSandTMS')))
        {
            // Entity configuration key is disabled
            throw error(strfmt("@ApplicationPlatform:DataEntityConfigKeyDisabled",'WHSandTMS'));
        }
    }
    protected void initializeDataSources(DataEntityRuntimeContext _entityCtx)
    {
        this.initializeDataSource(_entityCtx, 'WHSInventTransOrderCommittedReservationView', m_WHSInventTransOrderCommittedReservationView, this.getDataSourceId('WHSInventTransOrderCommittedReservationView'), this.getDataSourceRuntimeId('WHSInventTransOrderCommittedReservationView'), false/* optional */, true/* readonly */, false/* oneToMany */, false/* dateEffective */, false/* applyDateFilter */);
        this.initializeDataSourcesExtensions(_entityCtx);
    }
    private WHSInventTransOrderCommittedReservationView LookForUniqueKeyMatch_DS1(WHSOrderCommittedLicensePlateReservationEntity _wHSOrderCommittedLicensePlateReservationEntity, WHSInventTransOrderCommittedReservationView _wHSInventTransOrderCommittedReservationView)
    {
        WHSInventTransOrderCommittedReservationView wHSInventTransOrderCommittedReservationView_ = null;
        
        // Ensuring only fields in the selection list should be accessed for read-only data source.
        wHSInventTransOrderCommittedReservationView_.checkInvalidFieldAccess(true);
        
        select
            firstOnly
                // Specify explicit field selection for read-only data source.
                ReferenceCategory, OrderNumber, CommittingOriginInventTransId, LicensePlateId, ReservedInventoryQuantity, ItemId, ConfigId, InventColorId, InventSizeId, InventStyleId
            from
                wHSInventTransOrderCommittedReservationView_
        where
            wHSInventTransOrderCommittedReservationView_.RecId == _wHSInventTransOrderCommittedReservationView.RecId
        ;
        
        if (wHSInventTransOrderCommittedReservationView_)
        {
            return wHSInventTransOrderCommittedReservationView_;
        }
        
        return wHSInventTransOrderCommittedReservationView_;
    }

}

